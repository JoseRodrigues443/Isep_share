/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lapr4.red.s3.core.n1150710.chartWizard.extension.ui;

import csheets.core.Address;
import csheets.core.Cell;
import csheets.core.formula.compiler.FormulaCompilationException;
import csheets.ui.ctrl.UIController;
import java.awt.Color;
import java.awt.event.InputEvent;
import java.util.SortedSet;
import javax.swing.JPanel;
import lapr4.red.s3.core.n1150710.chartWizard.ChartCreator;
import lapr4.red.s3.core.n1150710.chartWizard.ChartTypeEnum;
import lapr4.red.s3.core.n1150710.chartWizard.ChartWizardController;
import lapr4.red.s3.core.n1150710.chartWizard.extension.list.ChartObject;
import org.jfree.chart.plot.PlotOrientation;

/**
 *
 * @author 1150710@isep.ipp.pt
 */
public class ChartUI extends javax.swing.JFrame {

    private final ChartWizardController chartController;

    private final ChartActionForUI action;

    private String[][] cellSelectedContent;

    private Address address1;

    private Address address2;

    private final UIController uic;

    /**
     * Creates new form ChartUI
     *
     * @param chartController
     * @param controller
     */
    public ChartUI(ChartWizardController chartController, UIController controller) {
        this.uic = controller;
        this.action = new ChartActionForUI(controller);
        this.cellSelectedContent = new String[1][1];
        this.chartController = chartController;
        initComponents();
        setVisible(true);
    }

    public ChartUI(ChartWizardController chartController, UIController controller,
            String[][] cellSelectedContent, Address address1, Address address2, String nameOfChart) {
        this.chartController = chartController;
        this.uic = controller;
        this.action = new ChartActionForUI(controller);
        this.cellSelectedContent = cellSelectedContent;
        this.address1 = address1;
        initComponents();
        this.jButtonCellData1.setText(address1.toString());
        this.address2 = address2;
        this.jButtonCellData2.setText(address2.toString());
        this.jTextFieldName.setText(nameOfChart);

        setVisible(true);
    }

    public String[][] getCellSelectedContent() {
        return cellSelectedContent;
    }

    public void setCellSelectedContent(String[][] cellSelectedContent) {
        this.cellSelectedContent = cellSelectedContent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneTabs = new javax.swing.JTabbedPane();
        jPanelWizard = new javax.swing.JPanel();
        jComboBoxTypeOfChart = new javax.swing.JComboBox<>();
        jButtonCellData1 = new javax.swing.JButton();
        jCheckBoxRowOrculumsLabel = new javax.swing.JCheckBox();
        jComboBoxVerticalHorizontal = new javax.swing.JComboBox<>();
        jComboBoxInfoInRowsOrColumns = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jButtonSave = new javax.swing.JButton();
        jButtonPreview = new javax.swing.JButton();
        jButtonCellData2 = new javax.swing.JButton();
        jPanelHelp = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaHelp = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chart Wizard");
        setAlwaysOnTop(true);
        setResizable(false);

        jTabbedPaneTabs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPaneTabsMouseClicked(evt);
            }
        });

        jComboBoxTypeOfChart.setModel(this.chartController.defaultListModelWithChartType()

        );
        jComboBoxTypeOfChart.setSelectedIndex(1);

        jButtonCellData1.setText("1st cell");
        jButtonCellData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCellData1ActionPerformed(evt);
            }
        });

        jCheckBoxRowOrculumsLabel.setText("First rows/columns are not labels");
        jCheckBoxRowOrculumsLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRowOrculumsLabelActionPerformed(evt);
            }
        });

        jComboBoxVerticalHorizontal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Horizontal", "Vertical" }));
        jComboBoxVerticalHorizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxVerticalHorizontalActionPerformed(evt);
            }
        });

        jComboBoxInfoInRowsOrColumns.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rows", "Columns" }));
        jComboBoxInfoInRowsOrColumns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxInfoInRowsOrColumnsActionPerformed(evt);
            }
        });

        jLabel1.setText("Info in rows or columns:");

        jTextFieldName.setText("Name");

        jButtonSave.setText("Save to List");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonPreview.setText("Preview");
        jButtonPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreviewActionPerformed(evt);
            }
        });

        jButtonCellData2.setText("2st cell");
        jButtonCellData2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCellData2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelWizardLayout = new javax.swing.GroupLayout(jPanelWizard);
        jPanelWizard.setLayout(jPanelWizardLayout);
        jPanelWizardLayout.setHorizontalGroup(
            jPanelWizardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelWizardLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelWizardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxTypeOfChart, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelWizardLayout.createSequentialGroup()
                        .addComponent(jButtonCellData1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCellData2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jCheckBoxRowOrculumsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jComboBoxVerticalHorizontal, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelWizardLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxInfoInRowsOrColumns, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextFieldName)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelWizardLayout.createSequentialGroup()
                        .addComponent(jButtonPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelWizardLayout.setVerticalGroup(
            jPanelWizardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelWizardLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanelWizardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCellData1)
                    .addComponent(jCheckBoxRowOrculumsLabel)
                    .addComponent(jButtonCellData2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxTypeOfChart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelWizardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxInfoInRowsOrColumns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(10, 10, 10)
                .addComponent(jComboBoxVerticalHorizontal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelWizardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonPreview))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jTabbedPaneTabs.addTab("Chart Wizard", jPanelWizard);

        jTextAreaHelp.setColumns(20);
        jTextAreaHelp.setRows(5);
        jTextAreaHelp.setText("Select the range\n\nChoose the type or chart.\n\n\n");
        jScrollPane1.setViewportView(jTextAreaHelp);

        javax.swing.GroupLayout jPanelHelpLayout = new javax.swing.GroupLayout(jPanelHelp);
        jPanelHelp.setLayout(jPanelHelpLayout);
        jPanelHelpLayout.setHorizontalGroup(
            jPanelHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
        );
        jPanelHelpLayout.setVerticalGroup(
            jPanelHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
        );

        jTabbedPaneTabs.addTab("Help", jPanelHelp);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneTabs, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPaneTabs)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxRowOrculumsLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRowOrculumsLabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxRowOrculumsLabelActionPerformed

    private void jButtonCellData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCellData1ActionPerformed
        // TODO add your handling code here:
        this.address1 = uic.getActiveCell().getAddress();
        jButtonCellData1.setText(address1.toString());
        this.jButtonCellData1.setBackground(Color.yellow);
    }//GEN-LAST:event_jButtonCellData1ActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        JPanel jpTmp = createChart();
        String name = this.jTextFieldName.getText();
        ChartObject chartObject = new ChartObject(jpTmp, cellSelectedContent, address1, address2, name);
        this.chartController.add(chartObject);
        chartObject.putInWindow();
        //this.chartController.getChartCreatorList().getChartCreators().get(0).putInWindow();     //for test
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jTabbedPaneTabsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPaneTabsMouseClicked
        // TODO add your handling code here:

        /**
         * close selected tab
         */
        if ((evt.getModifiers() & InputEvent.BUTTON2_MASK) != 0) {
            //System.out.println("middle" + (evt.getPoint()));
            int i = this.jTabbedPaneTabs.getSelectedIndex();
            /**
             * if is a preview tab
             */
            if (i > 1) {
                this.jTabbedPaneTabs.remove(i);
            }
        }
    }//GEN-LAST:event_jTabbedPaneTabsMouseClicked

    private void jButtonPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreviewActionPerformed
        // TODO add your handling code here:

        this.jTabbedPaneTabs.add(this.jTextFieldName.getText(), createChart());
    }//GEN-LAST:event_jButtonPreviewActionPerformed

    private void jButtonCellData2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCellData2ActionPerformed
        // TODO add your handling code here:
        this.address2 = uic.getActiveCell().getAddress();
        this.jButtonCellData2.setText(address2.toString());
        this.jButtonCellData2.setBackground(Color.BLUE);

    }//GEN-LAST:event_jButtonCellData2ActionPerformed

    private void jComboBoxVerticalHorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxVerticalHorizontalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxVerticalHorizontalActionPerformed

    private void jComboBoxInfoInRowsOrColumnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxInfoInRowsOrColumnsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxInfoInRowsOrColumnsActionPerformed

    private Cell[][] utilsGetSelectedCells() {
        int x = address1.getRow();
        int x1 = address2.getRow();
        int y = address1.getColumn();
        int y1 = address2.getColumn();
        int interval1 = x1 - x + 1;
        int interval2 = y1 - y + 1;
        Cell[][] cellses = new Cell[interval1][interval2];
        SortedSet<Cell> cells = uic.getActiveSpreadsheet().getCells(address1, address2);
        for (Cell cell : cells) {
            cellses[cell.getAddress().getRow() - x][cell.getAddress().getColumn() - y] = cell;
        }
        return cellses;
    }

    private JPanel createChart() {
        //Test chartCreator = new Test();
        //return chartCreator.pieChartJPanel();
        if (address1 != null && address2 != null) {

            try {
               if (!this.jCheckBoxRowOrculumsLabel.isSelected()){
                    uic.getActiveSpreadsheet().getCell(address1).setContent("¤");
               }
            } catch (FormulaCompilationException e) {

            }
            this.cellSelectedContent = this.chartController.stringsMatrix(utilsGetSelectedCells());
            // ChartCreator.printMatrix(cellSelectedContent);
        }
        /**
         * if is selected is because the rows arent labels
         */
        boolean areRowsOrColumnsLabels = !this.jCheckBoxRowOrculumsLabel.isSelected();
        boolean isRowOrColumnWithData = true;
        if (areRowsOrColumnsLabels) {
            String rowsOrColumnAsLabels = (String) this.jComboBoxInfoInRowsOrColumns.getSelectedItem();
            if (rowsOrColumnAsLabels.equalsIgnoreCase("Rows")) {
                isRowOrColumnWithData = true;
            } else if (rowsOrColumnAsLabels.equalsIgnoreCase("Columns")) {
                isRowOrColumnWithData = false;
            }
        }

        //chart type
        int i = jComboBoxTypeOfChart.getSelectedIndex();
        String description = this.chartController.chartTypeDescriptionList().get(i);
        ChartTypeEnum enumChartType = ChartTypeEnum.
                selectChartFromDescriptionString(description);

        /**
         * Index 0 = horizontal
         */
        PlotOrientation verticalHorizontal = jComboBoxVerticalHorizontal.getSelectedIndex() == 0 ? PlotOrientation.HORIZONTAL : PlotOrientation.VERTICAL;

        ChartCreator chartCreator = new ChartCreator(enumChartType,
                this.jTextFieldName.getName(), areRowsOrColumnsLabels,
                verticalHorizontal,
                this.getCellSelectedContent(),
                isRowOrColumnWithData);

        return chartCreator.jpWithGraph();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCellData1;
    private javax.swing.JButton jButtonCellData2;
    private javax.swing.JButton jButtonPreview;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxRowOrculumsLabel;
    private javax.swing.JComboBox<String> jComboBoxInfoInRowsOrColumns;
    private javax.swing.JComboBox<String> jComboBoxTypeOfChart;
    private javax.swing.JComboBox<String> jComboBoxVerticalHorizontal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelHelp;
    private javax.swing.JPanel jPanelWizard;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPaneTabs;
    private javax.swing.JTextArea jTextAreaHelp;
    private javax.swing.JTextField jTextFieldName;
    // End of variables declaration//GEN-END:variables
}
