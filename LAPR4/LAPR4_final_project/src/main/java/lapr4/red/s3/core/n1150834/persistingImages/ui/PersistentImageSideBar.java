package lapr4.red.s3.core.n1150834.persistingImages.ui;

import csheets.core.Cell;
import csheets.ui.ctrl.SelectionEvent;
import csheets.ui.ctrl.SelectionListener;
import csheets.ui.ctrl.UIController;
import java.awt.BorderLayout;
import java.awt.Image;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.border.TitledBorder;
import lapr4.red.s3.core.n1150834.persistingImages.PersistentImage;
import lapr4.red.s3.core.n1150834.persistingImages.PersistentImageCell;
import lapr4.red.s3.core.n1150834.persistingImages.PersistentImageCellListener;
import lapr4.red.s3.core.n1150834.persistingImages.PersistingImagesExtension;

/**
 * The Persistent Image sidebar
 *
 * @author 1150834
 */
public class PersistentImageSideBar extends javax.swing.JPanel implements SelectionListener, PersistentImageCellListener {

    /**
     * A image showing operation
     */
    private ShowPersistentImage controller;

    /**
     * Creates mew PersistentImagePanel
     *
     * @param uiController user interface Controller
     */
    public PersistentImageSideBar(UIController uiController) {
        initComponents();
        this.setLayout(new BorderLayout());
        controller = new ShowPersistentImage(uiController, this);
//        uiController.addSelectionListener(this);
        TitledBorder border = BorderFactory.createTitledBorder("Images");
        border.setTitleJustification(TitledBorder.CENTER);

        this.setBorder(border);

        this.add(jPanel1, BorderLayout.CENTER);
        this.add(jPanel2, BorderLayout.SOUTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                .addGap(125, 125, 125))
        );

        previousButton.setText("<");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setText(">");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(previousButton)
                        .addGap(18, 18, 18)
                        .addComponent(nextButton))
                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        PersistentImage img = controller.previousCellImage();
        setImageInLabel(img);
        disableNextButton();
        disablePreviousButton();
    }//GEN-LAST:event_previousButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        controller.removeImage();
        disableRemoveButton();
        disableNextButton();
        disablePreviousButton();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        PersistentImage img = controller.nexCellImage();
        setImageInLabel(img);
        disableNextButton();
        disablePreviousButton();

    }//GEN-LAST:event_nextButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables

    /**
     * When the user selects a cell this method is trigger to update the list of
     * cell
     *
     * @param event Event that is triggered when the user selects a cell
     */
    @Override
    public void selectionChanged(SelectionEvent event) {
        Cell cell = event.getCell();
        if (cell != null) {
            PersistentImageCell activeCell = (PersistentImageCell) cell.getExtension(PersistingImagesExtension.NAME);
            activeCell.addInsertImageCellListener(this);
            insertImageChanged(activeCell);
        }

        if (event.getPreviousCell() != null) {
            ((PersistentImageCell) event.getPreviousCell().getExtension(PersistingImagesExtension.NAME)).removeInsertImageCellListener(this);
        }
    }

    /**
     * This method is called by the method selectionChanged Updates the
     * activeCell and the list of images
     *
     * @param cell The new active cell
     */
    @Override
    public void insertImageChanged(PersistentImageCell cell) {
        controller.cellSelected(cell);
        disableNextButton();
        disablePreviousButton();
        disableRemoveButton();

    }

    /**
     * Method that updates the JLabel with the first
     *
     * @param image the new image that is going to be displayed in the
     */
    public void setImage(PersistentImage image) {
        if (image == null) {
            this.jLabel1.setText("This cell has no image.");
            this.jLabel1.setIcon(null);
        } else {
            setImageInLabel(image);
        }
    }

    /**
     * Method that disables the button next if there is no image after
     */
    private void disableNextButton() {
        if (controller.hasNextCellImage()) {
            this.nextButton.setEnabled(true);
        } else {
            this.nextButton.setEnabled(false);
        }
    }

    /**
     * Method that disables the button previous if there is no image before.
     */
    private void disablePreviousButton() {
        if (controller.hasPreviousCellImage()) {
            this.previousButton.setEnabled(true);
        } else {
            this.previousButton.setEnabled(false);
        }
    }

    /**
     * Method that disables the button remove if there is no image beeing
     * displayed
     */
    private void disableRemoveButton() {
        if (controller.hasImage()) {
            this.removeButton.setEnabled(true);
        } else {
            this.removeButton.setEnabled(false);
        }
    }

    /**
     * Method that sets the images in the JLabel
     *
     * @param image image to be displayed
     */
    private void setImageInLabel(PersistentImage image) {
        this.jLabel1.setText("");

        Image dimg = image.image().getImage().getScaledInstance(this.jLabel1.getWidth(), this.jLabel1.getHeight(), Image.SCALE_SMOOTH);

        ImageIcon icon = new ImageIcon(dimg);
        this.jLabel1.setIcon(icon);
    }
}
