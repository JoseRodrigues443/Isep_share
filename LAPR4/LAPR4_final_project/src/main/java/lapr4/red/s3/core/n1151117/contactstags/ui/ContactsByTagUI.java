/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lapr4.red.s3.core.n1151117.contactstags.ui;

import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Properties;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import lapr4.green.s2.core.n1150993.CompanyContact.Company;
import lapr4.green.s2.core.n1150993.CompanyContactUI.CompanyContactController;
import lapr4.red.s3.core.n1151117.contactstags.utils.Utils;
import lapr4.white.s1.core.n4567890.contacts.application.ContactController;
import lapr4.white.s1.core.n4567890.contacts.domain.Contact;

/**
 *
 * @author Barros
 */
public class ContactsByTagUI extends javax.swing.JDialog {

    private Utils utils;
    private CompanyContactController compController;
    private ContactController controller;
    private DefaultListModel modelContacts;
    private DefaultListModel modelCompanys;
    private String filter;

    /**
     * Creates new form ContactsByTagUI
     */
    public ContactsByTagUI(ContactController controller, Properties appProps, Utils utils) {
        super(new JFrame(), true);
        this.utils = utils;
        this.compController = new CompanyContactController(appProps);
        this.controller = controller;
        modelContacts = new DefaultListModel();
        modelCompanys = new DefaultListModel();
        filter = "";
        initComponents();
        txtFilter.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                filter = txtFilter.getText();
                displayContacts();
              }
        });
        displayContacts();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTagSearch = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listFilteredContacts = new javax.swing.JList<>();
        btnOK = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listCompanys = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblTagSearch.setText("Tag to search");

        listFilteredContacts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listFilteredContacts.setCellRenderer(new ContactRenderer());
        jScrollPane1.setViewportView(listFilteredContacts);

        btnOK.setText("Ok");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        listCompanys.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listFilteredContacts.setCellRenderer(new CompanyRenderer());
        jScrollPane2.setViewportView(listCompanys);

        jLabel1.setText("Contacts");

        jLabel2.setText("Companys");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnOK)
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTagSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTagSearch)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnEdit))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (!listFilteredContacts.isSelectionEmpty() && !listCompanys.isSelectionEmpty()) {
            JOptionPane.showConfirmDialog(null, "Please select only one contact to edit", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (listCompanys.isSelectionEmpty() && listFilteredContacts.isSelectionEmpty()) {
            JOptionPane.showConfirmDialog(null, "Please select the contact to edit first", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            if (!listFilteredContacts.isSelectionEmpty()) {
                utils.changeContact((Contact) listFilteredContacts.getSelectedValue());
                utils.changeActive();
                dispose();
            }
            else if (!listCompanys.isSelectionEmpty()) {
                utils.changeCompany(compController.getAllCompanys().get(listCompanys.getSelectedIndex()));
                utils.changeActive();
                dispose();
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTagSearch;
    private javax.swing.JList<Object> listCompanys;
    private javax.swing.JList<Object> listFilteredContacts;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables

    private void displayContacts() {
        modelContacts.clear();
        modelCompanys.clear();
        listCompanys = new JList<>(modelCompanys);
        listFilteredContacts = new JList<>(modelContacts);
        if (filter.isEmpty()) {
            Iterable<Contact> contacts = controller.allContacts();
            for (Contact c : contacts) {
                modelContacts.addElement(c);
            }
            Iterable<Company> companys = compController.getAllCompanys();
            for (Company c : companys) {
                modelCompanys.addElement(c.name());
            }
        } else {
            Iterable<Contact> contacts = controller.contagsByTagValue(filter);
            for (Contact c : contacts) {
                modelContacts.addElement(c);
            }
            Iterable<Company> companys = compController.companysByTagValue(filter);
            for (Company c : companys) {
                modelCompanys.addElement(c.name());
            }
        }

        jScrollPane2.setViewportView(listCompanys);
        jScrollPane1.setViewportView(listFilteredContacts);
    }

    class ContactRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            Contact c = (Contact) value;
            setText(c.name());
            return this;
        }
    }

    class CompanyRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            Company c = (Company) value;
            setText(c.name());
            return this;
        }
    }

}
