/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lapr4.blue.s3.lang.n1150595.tablesAndFilters.ui;

import csheets.core.IllegalValueTypeException;
import csheets.core.formula.Function;
import csheets.core.formula.compiler.FormulaCompilationException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import lapr4.blue.s3.lang.n1150595.tablesAndFilters.controller.TablesAndFiltersController;

/**
 *
 * @author Bruna Moreira Teixeira <1150595@isep.ipp.pt>
 */
public class RemoveFilterJPanel extends javax.swing.JPanel {

    private TablesAndFiltersController controller;
    private TablesAndFiltersSideBar sideBar;

    /**
     * Creates new form EditFiltersJPanel
     */
    public RemoveFilterJPanel(TablesAndFiltersController controller, TablesAndFiltersSideBar sideBar) {
        initComponents();

        this.controller = controller;
        this.sideBar = sideBar;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBoxFilters = new javax.swing.JComboBox<>();
        jButtonRemove = new javax.swing.JButton();
        jButtonSelectTable = new javax.swing.JButton();

        jLabel1.setText("Filter:");

        jComboBoxFilters.setModel(new javax.swing.DefaultComboBoxModel<>());
        jComboBoxFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFiltersActionPerformed(evt);
            }
        });

        jButtonRemove.setText("Remove");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        jButtonSelectTable.setText("Select Table");
        jButtonSelectTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(jButtonSelectTable))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jButtonRemove)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonSelectTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxFilters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonRemove)
                .addGap(25, 25, 25))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectTableActionPerformed
        try {
            this.controller.setActualTable(this.controller.tableByName(this.sideBar.getSelectedName()));

            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            for (String f : this.controller.actualTable().filters()) {
                model.addElement(f);
            }
            jComboBoxFilters.setModel(model);

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this.sideBar, "Please select a table!", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonSelectTableActionPerformed

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        int dialogButton = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove the filter selected?", "Remove Filter", JOptionPane.YES_NO_OPTION);
        if (dialogButton == JOptionPane.YES_OPTION) {
            String f = (String) jComboBoxFilters.getSelectedItem();
            this.controller.actualTable().removeFilter(f);
            if (this.controller.actualTable().actualFilter().equals(f)) {
                try {
                    this.controller.setEdit(true);
                    this.controller.actualTable().resetContent();
                    this.controller.setEdit(false);
                } catch (FormulaCompilationException ex) {
                    Logger.getLogger(RemoveFilterJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (!this.controller.actualTable().filters().isEmpty()) {
                    String newFilter = this.controller.actualTable().filters().get(0);
                    try {
                        if (newFilter.contains("(") && newFilter.contains(")")) {
                            String func = newFilter.substring(0, newFilter.indexOf("("));
                            int i = 0;
                            for (Function function : this.controller.functions()) {
                                if (function.getIdentifier().equals(func.toUpperCase())) {
                                    this.controller.selectFunction(i);
                                }
                                i++;
                            }
                            this.controller.applyFilter(newFilter.substring(newFilter.indexOf("(") + 1, newFilter.indexOf(")")), true);
                            this.controller.actualTable().setActualFilter(newFilter);
                        } else {
                            this.controller.applyFilter(newFilter, false);
                            this.controller.actualTable().setActualFilter(newFilter);
                        }
                    } catch (IllegalValueTypeException ex) {
                        Logger.getLogger(RemoveFilterJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (FormulaCompilationException ex) {
                        Logger.getLogger(RemoveFilterJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(null, "Filter successfully removed. New filter applied: " + newFilter);
                } else {
                    try {
                        this.controller.setEdit(true);
                        this.controller.actualTable().resetContent();
                        this.controller.setEdit(false);
                    } catch (FormulaCompilationException ex) {
                        Logger.getLogger(RemoveFilterJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(null, "No filters remain for this table");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Filter successfully removed");
            }
        }

        DefaultComboBoxModel<String> modell = new DefaultComboBoxModel<>();
        for (String filter : this.controller.actualTable().filters()) {
            modell.addElement(filter);
        }
        jComboBoxFilters.setModel(modell);

    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jComboBoxFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFiltersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxFiltersActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JButton jButtonSelectTable;
    private javax.swing.JComboBox<String> jComboBoxFilters;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
