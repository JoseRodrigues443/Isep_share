/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lapr4.green.s1.lang.n1141431.conditional.formatting.ui;

import csheets.core.formula.BinaryOperator;
import csheets.core.formula.lang.Language;
import csheets.core.formula.lang.RelationalOperator;
import csheets.ext.style.StylableCell;
import csheets.ext.style.StyleExtension;
import csheets.ui.ctrl.UIController;
import csheets.ui.ext.UIExtension;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import lapr4.green.s1.lang.n1141431.conditional.formatting.sidebar.ConditionalFormattingCellSideBarExtension;
import lapr4.red.s2.lang.n1150834.conditionalFormatting.ConditionalFormattingRangeExtension;

/**
 *
 * @author Pedro Oliveira 1141431 Class was altered in Sprint 2, in order to fit
 * extension related updates - 1150834
 */
public class UIConditionalFormattingJFrame extends javax.swing.JFrame {

    /**
     * instance of language
     */
    private Language lang = Language.getInstance();
    /**
     * list of binary operators
     */
    private List<BinaryOperator> listBinaryOperators = lang.getBinaryOperators();

    /**
     * List of relational operators
     */
    private List<RelationalOperator> list = new ArrayList<>();

    private UIController uiController;

    /**
     * Creates new form UIConditionalFormattingJFrame
     */
    public UIConditionalFormattingJFrame(UIController uiController) {
        initComponents();
        this.uiController = uiController;
        setLocationRelativeTo(null);
        setVisible(true);
        inUse("Cell Formatting"); // added in sprint2
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt1 = new javax.swing.JTextField();
        btnConfirm = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>(operatorsArray());
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Conditional Formatting of a Cell ");

        txt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt1ActionPerformed(evt);
            }
        });

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("Insert a value");

        jLabel2.setFont(new java.awt.Font("Dialog", 3, 24)); // NOI18N
        jLabel2.setText("Conditional Formatting of a Cell");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel3.setText("Choose a relational operator");

        jButton1.setText("undo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnConfirm)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirm)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt1ActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed

        if (uiController.getActiveCell().getContent().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Insert a value on a cell");
        } else if (txt1.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Insert a value on the text field");
        } else {

            RelationalOperator ro = list.get(combo.getSelectedIndex()); //gets the item selected in the combo and goes get it to the list

            if (ro.compare(Double.parseDouble(uiController.getActiveCell().getContent()), Double.parseDouble(txt1.getText()))) { //compares the value in the cell with the value inserted base on the relational operator
                StylableCell stylableCell = (StylableCell) uiController.getActiveCell().getExtension(StyleExtension.NAME);
                stylableCell.setBackgroundColor(Color.green);

                uiController.setCondition(condition());
                updateSideBar();
            } else {
                StylableCell stylableCell = (StylableCell) uiController.getActiveCell().getExtension(StyleExtension.NAME);
                stylableCell.setBackgroundColor(Color.red);
                uiController.setCondition(condition());
                updateSideBar();

            }
            inUse("None"); // added in sprint2
            dispose(); // added in sprint2
        }


    }//GEN-LAST:event_btnConfirmActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        uiController.setCondition("");
        updateSideBar();
        StylableCell stylableCell = (StylableCell) uiController.getActiveCell().getExtension(StyleExtension.NAME);
        stylableCell.setBackgroundColor(Color.WHITE);
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * finds the extension ConditionalFormattingCellSideBarExtension and
     * executes the method refreshInfo
     *
     */
    private void updateSideBar() {
        for (UIExtension ext : uiController.getExtensions()) {
            if (ext.getExtension() instanceof ConditionalFormattingCellSideBarExtension) {
                ConditionalFormattingCellSideBarExtension extension = (ConditionalFormattingCellSideBarExtension) ext.
                        getExtension();

                extension.refreshInfo();

            }
        }

    }

    /**
     * returns a string with the condition used on the Conditional Formatter
     *
     * @return
     */
    public String condition() {
        String str = "" + uiController.getActiveCell().toString() + combo.getSelectedItem() + txt1.getText();
        return str;
    }

    /**
     * Return a string of binary operators
     *
     * @return
     */
    private String[] operatorsArray() {
        List<String> aux = new ArrayList<>();

        for (int i = 0; i < listBinaryOperators.size(); i++) {
            if (listBinaryOperators.get(i) instanceof RelationalOperator) {
                list.add((RelationalOperator) listBinaryOperators.get(i));
                aux.add(listBinaryOperators.get(i).getIdentifier());
            }
        }
        String[] array = new String[aux.size()];
        for (int i = 0; i < aux.size(); i++) {
            array[i] = aux.get(i);
        }

        return array;
    }

    /**
     * Alter's the side bar to indicate that the current format being used is
     * for a single cell 
     * Added in Sprint 2
     *
     * @param inUse the format being used
     */
    public void inUse(String inUse) {
        for (UIExtension ext : uiController.getExtensions()) {
            if (ext.getExtension() instanceof ConditionalFormattingRangeExtension) {
                ConditionalFormattingRangeExtension extension = (ConditionalFormattingRangeExtension) ext.
                        getExtension();

                extension.inUse(inUse);

            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirm;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txt1;
    // End of variables declaration//GEN-END:variables
}
