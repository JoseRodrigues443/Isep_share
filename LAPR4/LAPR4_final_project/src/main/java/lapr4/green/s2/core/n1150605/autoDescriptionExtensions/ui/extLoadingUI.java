/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lapr4.green.s2.core.n1150605.autoDescriptionExtensions.ui;

import csheets.ext.Extension;
import csheets.ui.ctrl.UIController;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Miguel Morgado 1150605
 */
public class extLoadingUI extends javax.swing.JFrame {
    
    private UIController uiC;
    private extLoadingController controller;
    
    private ArrayList<Extension> copyAllExtensions; 
    private ArrayList<Extension> loadedExtensions; // loaded extensions
    private ArrayList<Extension> unloadedExtensions; // unloaded extensions
    
    private DefaultListModel<String> jList1Model;
    private DefaultListModel<String> jList2Model;
    private DefaultListModel<String> jList3Model;
    
    /**
     * Creates new form extLoadingUI
     * @param uiController, interface user controller
     */
    public extLoadingUI(UIController uiController) {     
        initComponents();
        
        this.uiC = uiController;
        this.controller = new extLoadingController(uiC);
        setLocationRelativeTo(null);
        setVisible(true);
        this.setDefaultCloseOperation(extLoadingUI.DISPOSE_ON_CLOSE);
               
        updateLoadedExtensionsJList();
        updateUnloadedExtensionsJList();
        
    }

    public void updateUnloadedExtensionsJList() {
        unloadedExtensions = new ArrayList<>();
        
        jList2Model = new DefaultListModel<>();
        jList2.setModel(jList2Model);
        
        jList1Model = new DefaultListModel<>();
        jList1.setModel(jList1Model);
        
        jList2.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                jList1Model.removeAllElements();
          
                int index = jList2.getSelectedIndex();
                
                if (index > -1) {
                for (int i=0; i<copyAllExtensions.size(); i++) {
                    if (copyAllExtensions.get(i).getName().equals(jList2.getSelectedValue())) {
                        jList1Model.addElement(copyAllExtensions.get(i).getVersion());
                        
                    }
                }
                
                jTextArea1.setText(unloadedExtensions.get(index).getDescription());                
                }
            }});
    }
    
    public void updateLoadedExtensionsJList() {
        copyAllExtensions = new ArrayList<>();
        loadedExtensions = new ArrayList<>();
        
        jList3Model = new DefaultListModel<>();
        jList3.setModel(jList3Model);
        
        Extension[] exts = controller.getExtensions();
        
        for (int i=0; i<exts.length; i++) {
            loadedExtensions.add(exts[i]);
            copyAllExtensions.add(exts[i]);
        }
        
        for (int i=0; i<loadedExtensions.size(); i++) {
            jList3Model.addElement(loadedExtensions.get(i).getName()+" - v"+loadedExtensions.get(i).getVersion());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jSeparator1 = new javax.swing.JSeparator();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Available extensions");

        jLabel2.setText("Loaded extensions");

        jLabel3.setText("Description:");

        jButton1.setText("Load");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Versions:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jScrollPane2.setViewportView(jList1);

        jScrollPane3.setViewportView(jList2);

        jScrollPane4.setViewportView(jList3);

        jButton2.setText("Unload");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(102, 102, 102))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(102, 102, 102))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(281, 281, 281))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(325, 325, 325))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(336, 336, 336))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel1)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(31, 31, 31)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jList3.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "SELECT AN EXTENSION!!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else {
            int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to unload this extension?",
                "Confirmation", JOptionPane.YES_NO_OPTION);
            
            if (reply == JOptionPane.YES_OPTION) {
                int index=0;
                
                String[] str = jList3.getSelectedValue().split("- v");
                
                for (int i=0; i<copyAllExtensions.size(); i++) {
                    if (copyAllExtensions.get(i).getName().equals(str[0].trim()) && copyAllExtensions.get(i).getVersion().equals(str[1].trim())) {
                        index = i;
                        System.out.println("-----------"+index);
                    }
                }
                
                controller.unloadExtension(str[0].trim(), str[1].trim(), index);
                
                loadedExtensions.clear();
                unloadedExtensions.clear();
                
                jList2Model.removeAllElements();
                jList3Model.removeAllElements();
        
                Extension[] exts = controller.getExtensions();   
        
                for (int i=0; i<exts.length; i++) {
                  jList3Model.addElement(exts[i].getName()+" - v"+exts[i].getVersion());  
                  loadedExtensions.add(exts[i]);
                }
                
                for (int i=0; i<copyAllExtensions.size(); i++) {
                    int ret = 0;
                    for (int j=0; j<loadedExtensions.size(); j++) {
                        if (copyAllExtensions.get(i).getName().equals(loadedExtensions.get(j).getName())) {
                            ret = 1;
                        }
                    }    
                
                   if (ret == 0) {
                    jList2Model.addElement(copyAllExtensions.get(i).getName());
                    unloadedExtensions.add(copyAllExtensions.get(i));
                }
            }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
              
        if (jList1.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "SELECT AN EXTENSION!!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else {    
        
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to load this extension?",
                "Confirmation", JOptionPane.YES_NO_OPTION);
        
        if (reply == JOptionPane.YES_OPTION) {
            int index=0;
            
            for (int i=0; i<copyAllExtensions.size(); i++) {
               if (copyAllExtensions.get(i).getName().equals(jList2.getSelectedValue()) && copyAllExtensions.get(i).getVersion().equals(jList1.getSelectedValue())) {
                  index = i;
                }
            }
        
            controller.loadExtension(copyAllExtensions.get(index).getClass().getName(), index);
      
            loadedExtensions.clear();
            unloadedExtensions.clear();
                
            jTextArea1.setText("");
            jList2Model.removeAllElements();
            jList3Model.removeAllElements();
        
            Extension[] exts = controller.getExtensions();   
        
            for (int i=0; i<exts.length; i++) {
                jList3Model.addElement(exts[i].getName()+" - v"+exts[i].getVersion());  
                loadedExtensions.add(exts[i]);            
            }
               
            for (int i=0; i<copyAllExtensions.size(); i++) {
               int ret = 0;
               for (int j=0; j<loadedExtensions.size(); j++) {
                    if (copyAllExtensions.get(i).getName().equals(loadedExtensions.get(j).getName())) {
                        ret = 1;
                    }
               }
                    
                if (ret == 0) {
                    jList2Model.addElement(copyAllExtensions.get(i).getName());
                    unloadedExtensions.add(copyAllExtensions.get(i));
                }
            }
        }
       }
                 
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
